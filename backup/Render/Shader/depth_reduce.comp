#version 460

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, r32f) uniform writeonly image2D outImage;
layout(binding = 1) uniform sampler2D inImage;

layout(push_constant) uniform block
{
	vec2 imageSize;
};

void main()
{
	uvec2 pos = gl_GlobalInvocationID.xy;

	// Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
	//float depth = texture(inImage, (vec2(pos) + vec2(0.5)) / imageSize).x;

	vec4 depths = vec4(
		texture(inImage,  pos / imageSize             ).x
	, texture(inImage,  (pos + vec2(1.0, 0.0) )/ imageSize ).x
	, texture(inImage, (pos + vec2(0.0, 1.0) )/ imageSize ).x
	, texture(inImage, (pos + vec2(1.0, 1.0))/ imageSize  ).x
	);
	depths.x=depths.x>=0.9999999f?0.0f:depths.x;
	depths.y=depths.y>=0.9999999f?0.0f:depths.y;
	depths.z=depths.z>=0.9999999f?0.0f:depths.z;
	depths.w=depths.w>=0.9999999f?0.0f:depths.w;

	float maxDepth = max(
		max(depths.x, depths.y)
	, max(depths.z, depths.w)
	);
	maxDepth=maxDepth<0.0000001f?1.0f:maxDepth;
	imageStore(outImage, ivec2(pos), vec4(maxDepth));
}
