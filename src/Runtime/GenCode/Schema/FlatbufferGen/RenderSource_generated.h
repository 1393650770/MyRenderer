// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RENDERSOURCE_MXRENDER_DATA_H_
#define FLATBUFFERS_GENERATED_RENDERSOURCE_MXRENDER_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace MXRender {
namespace Data {

struct TextureResourceDesc;

bool operator==(const TextureResourceDesc &lhs, const TextureResourceDesc &rhs);
bool operator!=(const TextureResourceDesc &lhs, const TextureResourceDesc &rhs);

inline const flatbuffers::TypeTable *TextureResourceDescTypeTable();

enum TextureFomat {
  TextureFomat_None = 0,
  TextureFomat_BC1 = 1,
  TextureFomat_BC1A = 2,
  TextureFomat_BC2 = 3,
  TextureFomat_BC3 = 4,
  TextureFomat_BC4 = 5,
  TextureFomat_BC5 = 6,
  TextureFomat_BC6H = 7,
  TextureFomat_BC7 = 8,
  TextureFomat_ETC1 = 9,
  TextureFomat_ETC2 = 10,
  TextureFomat_ETC2A = 11,
  TextureFomat_ETC2A1 = 12,
  TextureFomat_PTC12 = 13,
  TextureFomat_PTC14 = 14,
  TextureFomat_PTC12A = 15,
  TextureFomat_PTC14A = 16,
  TextureFomat_PTC22 = 17,
  TextureFomat_PTC24 = 18,
  TextureFomat_ATC = 19,
  TextureFomat_ATCE = 20,
  TextureFomat_ATCI = 21,
  TextureFomat_ASTC4x4 = 22,
  TextureFomat_ASTC5x5 = 23,
  TextureFomat_ASTC6x6 = 24,
  TextureFomat_ASTC8x5 = 25,
  TextureFomat_ASTC8x6 = 26,
  TextureFomat_ASTC10x5 = 27,
  TextureFomat_Unknown = 28,
  TextureFomat_R1 = 29,
  TextureFomat_A8 = 30,
  TextureFomat_R8 = 31,
  TextureFomat_R8I = 32,
  TextureFomat_R8U = 33,
  TextureFomat_R8S = 34,
  TextureFomat_R16 = 35,
  TextureFomat_R16I = 36,
  TextureFomat_R16U = 37,
  TextureFomat_R16F = 38,
  TextureFomat_R16S = 39,
  TextureFomat_R32I = 40,
  TextureFomat_R32U = 41,
  TextureFomat_R32F = 42,
  TextureFomat_RG8 = 43,
  TextureFomat_RG8I = 44,
  TextureFomat_RG8U = 45,
  TextureFomat_RG8S = 46,
  TextureFomat_RG16 = 47,
  TextureFomat_RG16I = 48,
  TextureFomat_RG16U = 49,
  TextureFomat_RG16F = 50,
  TextureFomat_RG16S = 51,
  TextureFomat_RG32I = 52,
  TextureFomat_RG32U = 53,
  TextureFomat_RG32F = 54,
  TextureFomat_RGB8 = 55,
  TextureFomat_RGB8I = 56,
  TextureFomat_RGB8U = 57,
  TextureFomat_RGB8S = 58,
  TextureFomat_RGB9E5F = 59,
  TextureFomat_RGB16I = 60,
  TextureFomat_RGB16U = 61,
  TextureFomat_RGB16F = 62,
  TextureFomat_RGB32I = 63,
  TextureFomat_RGB32U = 64,
  TextureFomat_RGB32F = 65,
  TextureFomat_BGRA8 = 66,
  TextureFomat_RGBA8 = 67,
  TextureFomat_RGBA8I = 68,
  TextureFomat_RGBA8U = 69,
  TextureFomat_RGBA8S = 70,
  TextureFomat_RGBA16 = 71,
  TextureFomat_RGBA16I = 72,
  TextureFomat_RGBA16U = 73,
  TextureFomat_RGBA16F = 74,
  TextureFomat_RGBA16S = 75,
  TextureFomat_RGBA32I = 76,
  TextureFomat_RGBA32U = 77,
  TextureFomat_RGBA32F = 78,
  TextureFomat_R5G6B5 = 79,
  TextureFomat_RGBA4 = 80,
  TextureFomat_RGB5A1 = 81,
  TextureFomat_RGB10A2 = 82,
  TextureFomat_RG11B10F = 83,
  TextureFomat_UnknownDepth = 84,
  TextureFomat_D16 = 85,
  TextureFomat_D24 = 86,
  TextureFomat_D24S8 = 87,
  TextureFomat_D32 = 88,
  TextureFomat_D32FS8 = 89,
  TextureFomat_D16F = 90,
  TextureFomat_D24F = 91,
  TextureFomat_D32F = 92,
  TextureFomat_D0S8 = 93,
  TextureFomat_Count = 94,
  TextureFomat_MIN = TextureFomat_None,
  TextureFomat_MAX = TextureFomat_Count
};

inline const TextureFomat (&EnumValuesTextureFomat())[95] {
  static const TextureFomat values[] = {
    TextureFomat_None,
    TextureFomat_BC1,
    TextureFomat_BC1A,
    TextureFomat_BC2,
    TextureFomat_BC3,
    TextureFomat_BC4,
    TextureFomat_BC5,
    TextureFomat_BC6H,
    TextureFomat_BC7,
    TextureFomat_ETC1,
    TextureFomat_ETC2,
    TextureFomat_ETC2A,
    TextureFomat_ETC2A1,
    TextureFomat_PTC12,
    TextureFomat_PTC14,
    TextureFomat_PTC12A,
    TextureFomat_PTC14A,
    TextureFomat_PTC22,
    TextureFomat_PTC24,
    TextureFomat_ATC,
    TextureFomat_ATCE,
    TextureFomat_ATCI,
    TextureFomat_ASTC4x4,
    TextureFomat_ASTC5x5,
    TextureFomat_ASTC6x6,
    TextureFomat_ASTC8x5,
    TextureFomat_ASTC8x6,
    TextureFomat_ASTC10x5,
    TextureFomat_Unknown,
    TextureFomat_R1,
    TextureFomat_A8,
    TextureFomat_R8,
    TextureFomat_R8I,
    TextureFomat_R8U,
    TextureFomat_R8S,
    TextureFomat_R16,
    TextureFomat_R16I,
    TextureFomat_R16U,
    TextureFomat_R16F,
    TextureFomat_R16S,
    TextureFomat_R32I,
    TextureFomat_R32U,
    TextureFomat_R32F,
    TextureFomat_RG8,
    TextureFomat_RG8I,
    TextureFomat_RG8U,
    TextureFomat_RG8S,
    TextureFomat_RG16,
    TextureFomat_RG16I,
    TextureFomat_RG16U,
    TextureFomat_RG16F,
    TextureFomat_RG16S,
    TextureFomat_RG32I,
    TextureFomat_RG32U,
    TextureFomat_RG32F,
    TextureFomat_RGB8,
    TextureFomat_RGB8I,
    TextureFomat_RGB8U,
    TextureFomat_RGB8S,
    TextureFomat_RGB9E5F,
    TextureFomat_RGB16I,
    TextureFomat_RGB16U,
    TextureFomat_RGB16F,
    TextureFomat_RGB32I,
    TextureFomat_RGB32U,
    TextureFomat_RGB32F,
    TextureFomat_BGRA8,
    TextureFomat_RGBA8,
    TextureFomat_RGBA8I,
    TextureFomat_RGBA8U,
    TextureFomat_RGBA8S,
    TextureFomat_RGBA16,
    TextureFomat_RGBA16I,
    TextureFomat_RGBA16U,
    TextureFomat_RGBA16F,
    TextureFomat_RGBA16S,
    TextureFomat_RGBA32I,
    TextureFomat_RGBA32U,
    TextureFomat_RGBA32F,
    TextureFomat_R5G6B5,
    TextureFomat_RGBA4,
    TextureFomat_RGB5A1,
    TextureFomat_RGB10A2,
    TextureFomat_RG11B10F,
    TextureFomat_UnknownDepth,
    TextureFomat_D16,
    TextureFomat_D24,
    TextureFomat_D24S8,
    TextureFomat_D32,
    TextureFomat_D32FS8,
    TextureFomat_D16F,
    TextureFomat_D24F,
    TextureFomat_D32F,
    TextureFomat_D0S8,
    TextureFomat_Count
  };
  return values;
}

inline const char * const *EnumNamesTextureFomat() {
  static const char * const names[96] = {
    "None",
    "BC1",
    "BC1A",
    "BC2",
    "BC3",
    "BC4",
    "BC5",
    "BC6H",
    "BC7",
    "ETC1",
    "ETC2",
    "ETC2A",
    "ETC2A1",
    "PTC12",
    "PTC14",
    "PTC12A",
    "PTC14A",
    "PTC22",
    "PTC24",
    "ATC",
    "ATCE",
    "ATCI",
    "ASTC4x4",
    "ASTC5x5",
    "ASTC6x6",
    "ASTC8x5",
    "ASTC8x6",
    "ASTC10x5",
    "Unknown",
    "R1",
    "A8",
    "R8",
    "R8I",
    "R8U",
    "R8S",
    "R16",
    "R16I",
    "R16U",
    "R16F",
    "R16S",
    "R32I",
    "R32U",
    "R32F",
    "RG8",
    "RG8I",
    "RG8U",
    "RG8S",
    "RG16",
    "RG16I",
    "RG16U",
    "RG16F",
    "RG16S",
    "RG32I",
    "RG32U",
    "RG32F",
    "RGB8",
    "RGB8I",
    "RGB8U",
    "RGB8S",
    "RGB9E5F",
    "RGB16I",
    "RGB16U",
    "RGB16F",
    "RGB32I",
    "RGB32U",
    "RGB32F",
    "BGRA8",
    "RGBA8",
    "RGBA8I",
    "RGBA8U",
    "RGBA8S",
    "RGBA16",
    "RGBA16I",
    "RGBA16U",
    "RGBA16F",
    "RGBA16S",
    "RGBA32I",
    "RGBA32U",
    "RGBA32F",
    "R5G6B5",
    "RGBA4",
    "RGB5A1",
    "RGB10A2",
    "RG11B10F",
    "UnknownDepth",
    "D16",
    "D24",
    "D24S8",
    "D32",
    "D32FS8",
    "D16F",
    "D24F",
    "D32F",
    "D0S8",
    "Count",
    nullptr
  };
  return names;
}

inline const char *EnumNameTextureFomat(TextureFomat e) {
  if (flatbuffers::IsOutRange(e, TextureFomat_None, TextureFomat_Count)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTextureFomat()[index];
}

enum TextureType {
  TextureType_ENUM_TYPE_NOT_VALID = 0,
  TextureType_ENUM_TYPE_2D = 1,
  TextureType_ENUM_TYPE_2D_MULTISAMPLE = 2,
  TextureType_ENUM_TYPE_2D_ARRAY = 3,
  TextureType_ENUM_TYPE_2D_DEPTH = 4,
  TextureType_ENUM_TYPE_CUBE_MAP = 5,
  TextureType_ENUM_TYPE_2D_DYNAMIC = 6,
  TextureType_ENUM_TYPE_3D = 7,
  TextureType_MIN = TextureType_ENUM_TYPE_NOT_VALID,
  TextureType_MAX = TextureType_ENUM_TYPE_3D
};

inline const TextureType (&EnumValuesTextureType())[8] {
  static const TextureType values[] = {
    TextureType_ENUM_TYPE_NOT_VALID,
    TextureType_ENUM_TYPE_2D,
    TextureType_ENUM_TYPE_2D_MULTISAMPLE,
    TextureType_ENUM_TYPE_2D_ARRAY,
    TextureType_ENUM_TYPE_2D_DEPTH,
    TextureType_ENUM_TYPE_CUBE_MAP,
    TextureType_ENUM_TYPE_2D_DYNAMIC,
    TextureType_ENUM_TYPE_3D
  };
  return values;
}

inline const char * const *EnumNamesTextureType() {
  static const char * const names[9] = {
    "ENUM_TYPE_NOT_VALID",
    "ENUM_TYPE_2D",
    "ENUM_TYPE_2D_MULTISAMPLE",
    "ENUM_TYPE_2D_ARRAY",
    "ENUM_TYPE_2D_DEPTH",
    "ENUM_TYPE_CUBE_MAP",
    "ENUM_TYPE_2D_DYNAMIC",
    "ENUM_TYPE_3D",
    nullptr
  };
  return names;
}

inline const char *EnumNameTextureType(TextureType e) {
  if (flatbuffers::IsOutRange(e, TextureType_ENUM_TYPE_NOT_VALID, TextureType_ENUM_TYPE_3D)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTextureType()[index];
}

enum TextureUsageType {
  TextureUsageType_ENUM_TYPE_NOT_VALID = 0,
  TextureUsageType_ENUM_TYPE_COLOR_ATTACHMENT = 1,
  TextureUsageType_ENUM_TYPE_PRESENT_SWAPCHAIN = 2,
  TextureUsageType_ENUM_TYPE_COPY = 4,
  TextureUsageType_ENUM_TYPE_SHADERRESOURCE = 8,
  TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT = 16,
  TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_READ_ONLY = 32,
  TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_WRITE_ONLY = 64,
  TextureUsageType_MIN = TextureUsageType_ENUM_TYPE_NOT_VALID,
  TextureUsageType_MAX = TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_WRITE_ONLY
};

inline const TextureUsageType (&EnumValuesTextureUsageType())[8] {
  static const TextureUsageType values[] = {
    TextureUsageType_ENUM_TYPE_NOT_VALID,
    TextureUsageType_ENUM_TYPE_COLOR_ATTACHMENT,
    TextureUsageType_ENUM_TYPE_PRESENT_SWAPCHAIN,
    TextureUsageType_ENUM_TYPE_COPY,
    TextureUsageType_ENUM_TYPE_SHADERRESOURCE,
    TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT,
    TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_READ_ONLY,
    TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_WRITE_ONLY
  };
  return values;
}

inline const char *EnumNameTextureUsageType(TextureUsageType e) {
  switch (e) {
    case TextureUsageType_ENUM_TYPE_NOT_VALID: return "ENUM_TYPE_NOT_VALID";
    case TextureUsageType_ENUM_TYPE_COLOR_ATTACHMENT: return "ENUM_TYPE_COLOR_ATTACHMENT";
    case TextureUsageType_ENUM_TYPE_PRESENT_SWAPCHAIN: return "ENUM_TYPE_PRESENT_SWAPCHAIN";
    case TextureUsageType_ENUM_TYPE_COPY: return "ENUM_TYPE_COPY";
    case TextureUsageType_ENUM_TYPE_SHADERRESOURCE: return "ENUM_TYPE_SHADERRESOURCE";
    case TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT: return "ENUM_TYPE_DEPTH_ATTACHMENT";
    case TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_READ_ONLY: return "ENUM_TYPE_DEPTH_ATTACHMENT_READ_ONLY";
    case TextureUsageType_ENUM_TYPE_DEPTH_ATTACHMENT_WRITE_ONLY: return "ENUM_TYPE_DEPTH_ATTACHMENT_WRITE_ONLY";
    default: return "";
  }
}

enum RenderResourceState {
  RenderResourceState_Invalid = 0,
  RenderResourceState_Undefined = 1ULL,
  RenderResourceState_VertexBuffer = 2ULL,
  RenderResourceState_ConstantBuffer = 4ULL,
  RenderResourceState_IndexBuffer = 8ULL,
  RenderResourceState_RenderTarget = 16ULL,
  RenderResourceState_Count = 21ULL,
  RenderResourceState_UnorderedAccess = 32ULL,
  RenderResourceState_DepthWrite = 64ULL,
  RenderResourceState_DepthRead = 128ULL,
  RenderResourceState_ShaderResource = 256ULL,
  RenderResourceState_StreamOut = 512ULL,
  RenderResourceState_IndirectArgument = 1024ULL,
  RenderResourceState_CopyDest = 2048ULL,
  RenderResourceState_CopySource = 4096ULL,
  RenderResourceState_GenerricRead = 5374ULL,
  RenderResourceState_ResolveDest = 8192ULL,
  RenderResourceState_ResolveSource = 16384ULL,
  RenderResourceState_InputAttachment = 32768ULL,
  RenderResourceState_Present = 65536ULL,
  RenderResourceState_BuildAsRead = 131072ULL,
  RenderResourceState_BuildAsWrite = 262144ULL,
  RenderResourceState_Raytracing = 524288ULL,
  RenderResourceState_Common = 1048576ULL,
  RenderResourceState_ShaderRate = 2097152ULL,
  RenderResourceState_MIN = RenderResourceState_Invalid,
  RenderResourceState_MAX = RenderResourceState_ShaderRate
};

inline const RenderResourceState (&EnumValuesRenderResourceState())[25] {
  static const RenderResourceState values[] = {
    RenderResourceState_Invalid,
    RenderResourceState_Undefined,
    RenderResourceState_VertexBuffer,
    RenderResourceState_ConstantBuffer,
    RenderResourceState_IndexBuffer,
    RenderResourceState_RenderTarget,
    RenderResourceState_Count,
    RenderResourceState_UnorderedAccess,
    RenderResourceState_DepthWrite,
    RenderResourceState_DepthRead,
    RenderResourceState_ShaderResource,
    RenderResourceState_StreamOut,
    RenderResourceState_IndirectArgument,
    RenderResourceState_CopyDest,
    RenderResourceState_CopySource,
    RenderResourceState_GenerricRead,
    RenderResourceState_ResolveDest,
    RenderResourceState_ResolveSource,
    RenderResourceState_InputAttachment,
    RenderResourceState_Present,
    RenderResourceState_BuildAsRead,
    RenderResourceState_BuildAsWrite,
    RenderResourceState_Raytracing,
    RenderResourceState_Common,
    RenderResourceState_ShaderRate
  };
  return values;
}

inline const char *EnumNameRenderResourceState(RenderResourceState e) {
  switch (e) {
    case RenderResourceState_Invalid: return "Invalid";
    case RenderResourceState_Undefined: return "Undefined";
    case RenderResourceState_VertexBuffer: return "VertexBuffer";
    case RenderResourceState_ConstantBuffer: return "ConstantBuffer";
    case RenderResourceState_IndexBuffer: return "IndexBuffer";
    case RenderResourceState_RenderTarget: return "RenderTarget";
    case RenderResourceState_Count: return "Count";
    case RenderResourceState_UnorderedAccess: return "UnorderedAccess";
    case RenderResourceState_DepthWrite: return "DepthWrite";
    case RenderResourceState_DepthRead: return "DepthRead";
    case RenderResourceState_ShaderResource: return "ShaderResource";
    case RenderResourceState_StreamOut: return "StreamOut";
    case RenderResourceState_IndirectArgument: return "IndirectArgument";
    case RenderResourceState_CopyDest: return "CopyDest";
    case RenderResourceState_CopySource: return "CopySource";
    case RenderResourceState_GenerricRead: return "GenerricRead";
    case RenderResourceState_ResolveDest: return "ResolveDest";
    case RenderResourceState_ResolveSource: return "ResolveSource";
    case RenderResourceState_InputAttachment: return "InputAttachment";
    case RenderResourceState_Present: return "Present";
    case RenderResourceState_BuildAsRead: return "BuildAsRead";
    case RenderResourceState_BuildAsWrite: return "BuildAsWrite";
    case RenderResourceState_Raytracing: return "Raytracing";
    case RenderResourceState_Common: return "Common";
    case RenderResourceState_ShaderRate: return "ShaderRate";
    default: return "";
  }
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) TextureResourceDesc FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t width_;
  uint32_t height_;
  uint8_t mip_level_;
  uint8_t layer_count_;
  int16_t padding0__;
  uint32_t format_;
  uint8_t type_;
  int8_t padding1__;  int16_t padding2__;
  uint32_t usage_;
  uint8_t depth_;
  uint8_t samples_;
  int16_t padding3__;

 public:
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TextureResourceDescTypeTable();
  }
  TextureResourceDesc() {
    memset(static_cast<void *>(this), 0, sizeof(TextureResourceDesc));
  }
  TextureResourceDesc(uint32_t _width, uint32_t _height, uint8_t _mip_level, uint8_t _layer_count, MXRender::Data::TextureFomat _format, MXRender::Data::TextureType _type, MXRender::Data::TextureUsageType _usage, uint8_t _depth, uint8_t _samples)
      : width_(flatbuffers::EndianScalar(_width)),
        height_(flatbuffers::EndianScalar(_height)),
        mip_level_(flatbuffers::EndianScalar(_mip_level)),
        layer_count_(flatbuffers::EndianScalar(_layer_count)),
        padding0__(0),
        format_(flatbuffers::EndianScalar(static_cast<uint32_t>(_format))),
        type_(flatbuffers::EndianScalar(static_cast<uint8_t>(_type))),
        padding1__(0),
        padding2__(0),
        usage_(flatbuffers::EndianScalar(static_cast<uint32_t>(_usage))),
        depth_(flatbuffers::EndianScalar(_depth)),
        samples_(flatbuffers::EndianScalar(_samples)),
        padding3__(0) {
    (void)padding0__;
    (void)padding1__;    (void)padding2__;
    (void)padding3__;
  }
  uint32_t width() const {
    return flatbuffers::EndianScalar(width_);
  }
  uint32_t height() const {
    return flatbuffers::EndianScalar(height_);
  }
  uint8_t mip_level() const {
    return flatbuffers::EndianScalar(mip_level_);
  }
  uint8_t layer_count() const {
    return flatbuffers::EndianScalar(layer_count_);
  }
  MXRender::Data::TextureFomat format() const {
    return static_cast<MXRender::Data::TextureFomat>(flatbuffers::EndianScalar(format_));
  }
  MXRender::Data::TextureType type() const {
    return static_cast<MXRender::Data::TextureType>(flatbuffers::EndianScalar(type_));
  }
  MXRender::Data::TextureUsageType usage() const {
    return static_cast<MXRender::Data::TextureUsageType>(flatbuffers::EndianScalar(usage_));
  }
  uint8_t depth() const {
    return flatbuffers::EndianScalar(depth_);
  }
  uint8_t samples() const {
    return flatbuffers::EndianScalar(samples_);
  }
};
FLATBUFFERS_STRUCT_END(TextureResourceDesc, 28);

inline bool operator==(const TextureResourceDesc &lhs, const TextureResourceDesc &rhs) {
  return
      (lhs.width() == rhs.width()) &&
      (lhs.height() == rhs.height()) &&
      (lhs.mip_level() == rhs.mip_level()) &&
      (lhs.layer_count() == rhs.layer_count()) &&
      (lhs.format() == rhs.format()) &&
      (lhs.type() == rhs.type()) &&
      (lhs.usage() == rhs.usage()) &&
      (lhs.depth() == rhs.depth()) &&
      (lhs.samples() == rhs.samples());
}

inline bool operator!=(const TextureResourceDesc &lhs, const TextureResourceDesc &rhs) {
    return !(lhs == rhs);
}


inline const flatbuffers::TypeTable *TextureFomatTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MXRender::Data::TextureFomatTypeTable
  };
  static const char * const names[] = {
    "None",
    "BC1",
    "BC1A",
    "BC2",
    "BC3",
    "BC4",
    "BC5",
    "BC6H",
    "BC7",
    "ETC1",
    "ETC2",
    "ETC2A",
    "ETC2A1",
    "PTC12",
    "PTC14",
    "PTC12A",
    "PTC14A",
    "PTC22",
    "PTC24",
    "ATC",
    "ATCE",
    "ATCI",
    "ASTC4x4",
    "ASTC5x5",
    "ASTC6x6",
    "ASTC8x5",
    "ASTC8x6",
    "ASTC10x5",
    "Unknown",
    "R1",
    "A8",
    "R8",
    "R8I",
    "R8U",
    "R8S",
    "R16",
    "R16I",
    "R16U",
    "R16F",
    "R16S",
    "R32I",
    "R32U",
    "R32F",
    "RG8",
    "RG8I",
    "RG8U",
    "RG8S",
    "RG16",
    "RG16I",
    "RG16U",
    "RG16F",
    "RG16S",
    "RG32I",
    "RG32U",
    "RG32F",
    "RGB8",
    "RGB8I",
    "RGB8U",
    "RGB8S",
    "RGB9E5F",
    "RGB16I",
    "RGB16U",
    "RGB16F",
    "RGB32I",
    "RGB32U",
    "RGB32F",
    "BGRA8",
    "RGBA8",
    "RGBA8I",
    "RGBA8U",
    "RGBA8S",
    "RGBA16",
    "RGBA16I",
    "RGBA16U",
    "RGBA16F",
    "RGBA16S",
    "RGBA32I",
    "RGBA32U",
    "RGBA32F",
    "R5G6B5",
    "RGBA4",
    "RGB5A1",
    "RGB10A2",
    "RG11B10F",
    "UnknownDepth",
    "D16",
    "D24",
    "D24S8",
    "D32",
    "D32FS8",
    "D16F",
    "D24F",
    "D32F",
    "D0S8",
    "Count"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 95, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TextureTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MXRender::Data::TextureTypeTypeTable
  };
  static const char * const names[] = {
    "ENUM_TYPE_NOT_VALID",
    "ENUM_TYPE_2D",
    "ENUM_TYPE_2D_MULTISAMPLE",
    "ENUM_TYPE_2D_ARRAY",
    "ENUM_TYPE_2D_DEPTH",
    "ENUM_TYPE_CUBE_MAP",
    "ENUM_TYPE_2D_DYNAMIC",
    "ENUM_TYPE_3D"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 8, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TextureUsageTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UINT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MXRender::Data::TextureUsageTypeTypeTable
  };
  static const int64_t values[] = { 0, 1, 2, 4, 8, 16, 32, 64 };
  static const char * const names[] = {
    "ENUM_TYPE_NOT_VALID",
    "ENUM_TYPE_COLOR_ATTACHMENT",
    "ENUM_TYPE_PRESENT_SWAPCHAIN",
    "ENUM_TYPE_COPY",
    "ENUM_TYPE_SHADERRESOURCE",
    "ENUM_TYPE_DEPTH_ATTACHMENT",
    "ENUM_TYPE_DEPTH_ATTACHMENT_READ_ONLY",
    "ENUM_TYPE_DEPTH_ATTACHMENT_WRITE_ONLY"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 8, type_codes, type_refs, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *RenderResourceStateTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 },
    { flatbuffers::ET_ULONG, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MXRender::Data::RenderResourceStateTypeTable
  };
  static const int64_t values[] = { 0, 1ULL, 2ULL, 4ULL, 8ULL, 16ULL, 21ULL, 32ULL, 64ULL, 128ULL, 256ULL, 512ULL, 1024ULL, 2048ULL, 4096ULL, 5374ULL, 8192ULL, 16384ULL, 32768ULL, 65536ULL, 131072ULL, 262144ULL, 524288ULL, 1048576ULL, 2097152ULL };
  static const char * const names[] = {
    "Invalid",
    "Undefined",
    "VertexBuffer",
    "ConstantBuffer",
    "IndexBuffer",
    "RenderTarget",
    "Count",
    "UnorderedAccess",
    "DepthWrite",
    "DepthRead",
    "ShaderResource",
    "StreamOut",
    "IndirectArgument",
    "CopyDest",
    "CopySource",
    "GenerricRead",
    "ResolveDest",
    "ResolveSource",
    "InputAttachment",
    "Present",
    "BuildAsRead",
    "BuildAsWrite",
    "Raytracing",
    "Common",
    "ShaderRate"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 25, type_codes, type_refs, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TextureResourceDescTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UINT, 0, 0 },
    { flatbuffers::ET_UCHAR, 0, 1 },
    { flatbuffers::ET_UINT, 0, 2 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MXRender::Data::TextureFomatTypeTable,
    MXRender::Data::TextureTypeTypeTable,
    MXRender::Data::TextureUsageTypeTypeTable
  };
  static const int64_t values[] = { 0, 4, 8, 9, 12, 16, 20, 24, 25, 28 };
  static const char * const names[] = {
    "width",
    "height",
    "mip_level",
    "layer_count",
    "format",
    "type",
    "usage",
    "depth",
    "samples"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 9, type_codes, type_refs, values, names
  };
  return &tt;
}

}  // namespace Data
}  // namespace MXRender

#endif  // FLATBUFFERS_GENERATED_RENDERSOURCE_MXRENDER_DATA_H_
